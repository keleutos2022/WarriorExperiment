@using WarriorExperiment.Core.Services
@using WarriorExperiment.Persistence.Entities
@using WarriorExperiment.App.Components.Charts
@using WarriorExperiment.App.Components.Photos
@inject WaMeasurementEntryService MeasurementService
@inject NotificationService NotificationService
@inherits WaBaseComponent

<RadzenStack Gap="1rem">
    @if (isLoading)
    {
        <RadzenCard Style="padding: 2rem; text-align: center;">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                <RadzenText TextStyle="TextStyle.Body1">Loading measurement data...</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
    else
    {
        <!-- Analysis Mode Selector -->
        <RadzenCard Style="padding: 1rem;">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenIcon Icon="analytics" Style="color: var(--rz-primary);" />
                    <RadzenText TextStyle="TextStyle.H6" Style="margin: 0;">Analysis Mode:</RadzenText>
                </RadzenStack>
                
                <RadzenSelectBar @bind-Value="@analysisMode" Data="@analysisModes" TextProperty="Label" ValueProperty="Value" 
                               Change="@((string value) => OnAnalysisModeChanged())" />
            </RadzenStack>
        </RadzenCard>

        @if (analysisMode == "single")
        {
            <!-- Single Method Analysis -->
            <RadzenCard Style="padding: 1rem;">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenIcon Icon="fitness_center" Style="color: var(--rz-primary);" />
                        <RadzenText TextStyle="TextStyle.Body1" Style="margin: 0;">Measurement Method:</RadzenText>
                    </RadzenStack>
                    
                    @if (measurementMethods.Any())
                    {
                        <RadzenDropDown @bind-Value="@selectedMethodId" Data="@measurementMethods" TextProperty="Name" ValueProperty="Id"
                                      Change="@((object value) => OnMethodChanged())" Placeholder="Select measurement method..."
                                      Style="min-width: 200px;" />
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                            No measurement methods available
                        </RadzenText>
                    }
                </RadzenStack>
            </RadzenCard>

            @if (selectedMethodId.HasValue && methodEntries.Any())
            {
                <!-- Single Method Content -->
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Body Composition">
                            <RadzenRow Gap="1rem" Style="margin-top: 1rem;">
                                <!-- Weight -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Weight" Data="@GetChartData(nameof(WaMeasurementEntry.Weight))" 
                                                      Unit="kg" IsBetterHigher="false" />
                                </RadzenColumn>
                                
                                <!-- Body Fat -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Body Fat %" Data="@GetChartData(nameof(WaMeasurementEntry.BodyFat))" 
                                                      Unit="%" IsBetterHigher="false" />
                                </RadzenColumn>
                            </RadzenRow>
                            
                            <RadzenRow Gap="1rem">
                                <!-- Muscle Mass Percentage -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Muscle Mass %" Data="@GetChartData(nameof(WaMeasurementEntry.MuscleMassPercentage))" 
                                                      Unit="%" IsBetterHigher="true" />
                                </RadzenColumn>
                                
                                <!-- BMI -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="BMI" Data="@GetChartData(nameof(WaMeasurementEntry.BMI))" 
                                                      Unit="" IsBetterHigher="false" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenTabsItem>
                        
                        <RadzenTabsItem Text="Advanced Metrics">
                            <RadzenRow Gap="1rem" Style="margin-top: 1rem;">
                                <!-- Visceral Fat -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Visceral Fat Level (1-30)" Data="@GetIntChartData(nameof(WaMeasurementEntry.VisceralFat))" 
                                                      Unit="" IsBetterHigher="false" />
                                </RadzenColumn>
                                
                                <!-- Metabolic Age -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Metabolic Age" Data="@GetIntChartData(nameof(WaMeasurementEntry.MetabolicAge))" 
                                                      Unit="years" IsBetterHigher="false" />
                                </RadzenColumn>
                            </RadzenRow>
                            
                            <RadzenRow Gap="1rem">
                                <!-- BMR -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Basal Metabolic Rate" Data="@GetIntChartData(nameof(WaMeasurementEntry.BasalMetabolicRate))" 
                                                      Unit="kcal" IsBetterHigher="true" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            }
            else if (selectedMethodId.HasValue)
            {
                <RadzenCard Style="padding: 2rem; text-align: center;">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenIcon Icon="data_usage" Style="font-size: 48px; color: var(--rz-text-secondary-color); opacity: 0.5;" />
                        <RadzenText TextStyle="TextStyle.H6">No Data for Selected Method</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color: var(--rz-text-secondary-color);">
                            No measurement entries found for the selected method and date range.
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else
        {
            <!-- Cross-Method Analysis -->
            @if (crossMethodEntries.Any())
            {
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Body Circumferences">
                            <RadzenRow Gap="1rem" Style="margin-top: 1rem;">
                                <!-- Chest -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Chest Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.ChestCircumference))" 
                                                      Unit="cm" IsBetterHigher="true" ShowMethodLegend="true" />
                                </RadzenColumn>
                                
                                <!-- Waist -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Waist Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.WaistCircumference))" 
                                                      Unit="cm" IsBetterHigher="false" ShowMethodLegend="true" />
                                </RadzenColumn>
                            </RadzenRow>
                            
                            <RadzenRow Gap="1rem">
                                <!-- Hip -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Hip Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.HipCircumference))" 
                                                      Unit="cm" IsBetterHigher="true" ShowMethodLegend="true" />
                                </RadzenColumn>
                                
                                <!-- Bicep -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Bicep Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.BicepCircumference))" 
                                                      Unit="cm" IsBetterHigher="true" ShowMethodLegend="true" />
                                </RadzenColumn>
                            </RadzenRow>
                            
                            <RadzenRow Gap="1rem">
                                <!-- Thigh -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Thigh Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.ThighCircumference))" 
                                                      Unit="cm" IsBetterHigher="true" ShowMethodLegend="true" />
                                </RadzenColumn>
                                
                                <!-- Calf -->
                                <RadzenColumn SizeLG="6" SizeMD="12">
                                    <WaMeasurementChart Title="Calf Circumference" Data="@GetCrossMethodChartData(nameof(WaMeasurementEntry.CalfCircumference))" 
                                                      Unit="cm" IsBetterHigher="true" ShowMethodLegend="true" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenTabsItem>
                        
                        <RadzenTabsItem Text="Progress Photos">
                            <div style="margin-top: 1rem;">
                                <WaMeasurementPhotoProgress MeasurementEntries="@crossMethodEntries" />
                            </div>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            }
            else
            {
                <RadzenCard Style="padding: 2rem; text-align: center;">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenIcon Icon="photo_size_select_actual" Style="font-size: 48px; color: var(--rz-text-secondary-color); opacity: 0.5;" />
                        <RadzenText TextStyle="TextStyle.H6">No Cross-Method Data Found</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color: var(--rz-text-secondary-color);">
                            No circumference measurements or photos found for the selected date range.
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            }
        }
    }
</RadzenStack>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-6);
    [Parameter] public DateTime EndDate { get; set; } = DateTime.Today;
    
    private bool isLoading = true;
    private string analysisMode = "single";
    private int? selectedMethodId;
    
    private List<WaMeasurementMethod> measurementMethods = new();
    private List<WaMeasurementEntry> methodEntries = new();
    private List<WaMeasurementEntry> crossMethodEntries = new();
    
    private readonly List<AnalysisModeOption> analysisModes = new()
    {
        new() { Value = "single", Label = "Single Method Analysis" },
        new() { Value = "cross", Label = "Cross-Method Comparison" }
    };

    public class AnalysisModeOption
    {
        public string Value { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMeasurementMethods();
        await LoadData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    
    private async Task LoadMeasurementMethods()
    {
        try
        {
            measurementMethods = await MeasurementService.GetMeasurementMethodsAsync();
            
            // Auto-select first method if available
            if (measurementMethods.Any() && !selectedMethodId.HasValue)
            {
                selectedMethodId = measurementMethods.First().Id;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error loading measurement methods: {ex.Message}");
        }
    }
    
    private async Task LoadData()
    {
        if (UserId <= 0) return;
        
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Load method-specific data
            if (selectedMethodId.HasValue)
            {
                methodEntries = await MeasurementService.GetByUserAndDateRangeAsync(UserId, StartDate, EndDate, selectedMethodId.Value);
            }
            
            // Load cross-method data
            crossMethodEntries = await MeasurementService.GetCircumferencesAndPhotosAsync(UserId, StartDate, EndDate);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error loading measurement data: {ex.Message}");
            methodEntries = new();
            crossMethodEntries = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task OnAnalysisModeChanged()
    {
        await LoadData();
    }
    
    private async Task OnMethodChanged()
    {
        await LoadData();
    }
    
    private List<WaMeasurementChart.ChartDataItem> GetChartData(string propertyName)
    {
        return methodEntries
            .Where(entry => GetDecimalPropertyValue(entry, propertyName).HasValue)
            .Select(entry => new WaMeasurementChart.ChartDataItem
            {
                Date = entry.Date,
                DateLabel = entry.Date.ToString("MM/dd"),
                Value = GetDecimalPropertyValue(entry, propertyName) ?? 0,
                MethodId = entry.MeasurementMethodId,
                MethodName = entry.MeasurementMethod?.Name ?? "Unknown"
            }).ToList();
    }
    
    private List<WaMeasurementChart.ChartDataItem> GetIntChartData(string propertyName)
    {
        return methodEntries
            .Where(entry => GetIntPropertyValue(entry, propertyName).HasValue)
            .Select(entry => new WaMeasurementChart.ChartDataItem
            {
                Date = entry.Date,
                DateLabel = entry.Date.ToString("MM/dd"),
                Value = (decimal)(GetIntPropertyValue(entry, propertyName) ?? 0),
                MethodId = entry.MeasurementMethodId,
                MethodName = entry.MeasurementMethod?.Name ?? "Unknown"
            }).ToList();
    }
    
    private List<WaMeasurementChart.ChartDataItem> GetCrossMethodChartData(string propertyName)
    {
        return crossMethodEntries
            .Where(entry => GetDecimalPropertyValue(entry, propertyName).HasValue)
            .Select(entry => new WaMeasurementChart.ChartDataItem
            {
                Date = entry.Date,
                DateLabel = entry.Date.ToString("MM/dd"),
                Value = GetDecimalPropertyValue(entry, propertyName) ?? 0,
                MethodId = entry.MeasurementMethodId,
                MethodName = entry.MeasurementMethod?.Name ?? "Unknown"
            }).ToList();
    }
    
    private decimal? GetDecimalPropertyValue(WaMeasurementEntry entry, string propertyName)
    {
        return propertyName switch
        {
            nameof(WaMeasurementEntry.Weight) => entry.Weight,
            nameof(WaMeasurementEntry.BodyFat) => entry.BodyFat,
            nameof(WaMeasurementEntry.MuscleMassPercentage) => entry.MuscleMassPercentage,
            nameof(WaMeasurementEntry.MuscleMass) => entry.MuscleMass,
            nameof(WaMeasurementEntry.BMI) => entry.BMI,
            nameof(WaMeasurementEntry.ChestCircumference) => entry.ChestCircumference,
            nameof(WaMeasurementEntry.WaistCircumference) => entry.WaistCircumference,
            nameof(WaMeasurementEntry.HipCircumference) => entry.HipCircumference,
            nameof(WaMeasurementEntry.BicepCircumference) => entry.BicepCircumference,
            nameof(WaMeasurementEntry.ThighCircumference) => entry.ThighCircumference,
            nameof(WaMeasurementEntry.CalfCircumference) => entry.CalfCircumference,
            _ => null
        };
    }
    
    private int? GetIntPropertyValue(WaMeasurementEntry entry, string propertyName)
    {
        return propertyName switch
        {
            nameof(WaMeasurementEntry.VisceralFat) => entry.VisceralFat,
            nameof(WaMeasurementEntry.MetabolicAge) => entry.MetabolicAge,
            nameof(WaMeasurementEntry.BasalMetabolicRate) => entry.BasalMetabolicRate,
            _ => null
        };
    }
}