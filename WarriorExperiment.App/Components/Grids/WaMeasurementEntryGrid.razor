@using Microsoft.EntityFrameworkCore
@using WarriorExperiment.Persistence.Models
@using WarriorExperiment.Core.Services
@inherits WaBaseComponent
@inject WaMeasurementEntryService MeasurementService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

@if (isLoading)
{
    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 200px;">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
    </RadzenStack>
}
else
{
    <RadzenStack Gap="1rem">
        <RadzenRow JustifyContent="JustifyContent.End" class="wa-grid-header">
            <RadzenColumn Size="12" SizeMD="4" SizeLG="3">
                <RadzenButton Text="New Measurement" Icon="add" ButtonStyle="ButtonStyle.Primary" 
                            Click="@(() => Navigation.NavigateTo("/measurement/edit"))" 
                            Style="width: 100%;" 
                            class="wa-add-button" />
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenDataGrid @ref="grid" Data="@Data" TItem="WaMeasurementEntry" 
                      AllowFiltering="true" AllowSorting="true" AllowPaging="true" PageSize="20"
                      FilterMode="FilterMode.Simple" LogicalFilterOperator="LogicalFilterOperator.Or"
                      class="wa-responsive-grid">
            <Columns>
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="Date" Title="Date" Width="120px" 
                                    CssClass="wa-priority-1">
                    <Template Context="entry">
                        @entry.Date.ToString("yyyy-MM-dd")
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="MeasurementMethod.Name" Title="Method" Width="150px" 
                                    CssClass="wa-priority-3" />
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="Weight" Title="Weight (kg)" Width="100px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-1">
                    <Template Context="entry">
                        @entry.Weight?.ToString("F1") kg
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="BodyFat" Title="Body Fat %" Width="100px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-2">
                    <Template Context="entry">
                        @if (entry.BodyFat.HasValue)
                        {
                            <span>@entry.BodyFat.Value.ToString("F1")%</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="MuscleMass" Title="Muscle (kg)" Width="100px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-2">
                    <Template Context="entry">
                        @if (entry.MuscleMass.HasValue)
                        {
                            <span>@entry.MuscleMass.Value.ToString("F1") kg</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="BMI" Title="BMI" Width="80px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-3">
                    <Template Context="entry">
                        @entry.BMI?.ToString("F1")
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="WaistCircumference" Title="Waist (cm)" Width="100px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-3">
                    <Template Context="entry">
                        @if (entry.WaistCircumference.HasValue)
                        {
                            <span>@entry.WaistCircumference.Value.ToString("F1") cm</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="ChestCircumference" Title="Chest (cm)" Width="100px" TextAlign="TextAlign.Right"
                                    CssClass="wa-priority-3">
                    <Template Context="entry">
                        @if (entry.ChestCircumference.HasValue)
                        {
                            <span>@entry.ChestCircumference.Value.ToString("F1") cm</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Property="Notes" Title="Notes" Width="200px"
                                    CssClass="wa-priority-3">
                    <Template Context="entry">
                        @if (!string.IsNullOrWhiteSpace(entry.Notes))
                        {
                            <RadzenText TextStyle="TextStyle.Caption" title="@entry.Notes">
                                @(entry.Notes.Length > 50 ? entry.Notes.Substring(0, 50) + "..." : entry.Notes)
                            </RadzenText>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="WaMeasurementEntry" Title="Actions" Frozen="true" 
                                    Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center"
                                    CssClass="wa-priority-1">
                    <Template Context="entry">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                                    Click="@(() => Navigation.NavigateTo($"/measurement/edit/{entry.Id}"))"
                                    title="Edit measurement" 
                                    class="wa-action-button" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                    Click="@(() => DeleteEntry(entry))"
                                    title="Delete measurement" 
                                    class="wa-action-button" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}

@code {
    [Parameter] public List<WaMeasurementEntry>? Data { get; set; }
    [Parameter] public bool AutoLoad { get; set; } = true;
    [CascadingParameter] public WaUser? CurrentUser { get; set; }
    
    private RadzenDataGrid<WaMeasurementEntry>? grid;
    private bool isLoading = false;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (AutoLoad && CurrentUser != null && Data == null)
        {
            isLoading = true;
            try
            {
                Data = await MeasurementService.GetAllAsync(CurrentUser.Id);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
    
    private async Task DeleteEntry(WaMeasurementEntry entry)
    {
        var result = await DialogService.Confirm(
            $"Are you sure you want to delete the measurement from {entry.Date:yyyy-MM-dd}?", 
            "Delete Measurement", 
            new ConfirmOptions { OkButtonText = "Delete", CancelButtonText = "Cancel" });
        
        if (result == true)
        {
            try
            {
                var success = await MeasurementService.DeleteAsync(entry.Id);
                
                if (success && Data != null)
                {
                    Data.Remove(entry);
                    await grid!.Reload();
                }
                
                NotificationService.Notify(NotificationSeverity.Success, "Measurement deleted successfully");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, $"Error deleting measurement: {ex.Message}");
            }
        }
    }
}

<style>
    /* Mobile-friendly grid styles */
    .wa-responsive-grid {
        overflow-x: auto;
        font-size: 0.9rem;
    }

    .wa-add-button {
        min-height: 44px;
        font-size: 0.9rem;
    }

    .wa-action-button {
        min-width: 40px !important;
        min-height: 40px !important;
        margin: 0.125rem;
    }

    /* Mobile responsive column hiding */
    @@media (max-width: 1024px) {
        .wa-priority-3 {
            display: none !important;
        }
        
        .wa-responsive-grid {
            font-size: 0.8rem;
        }
    }

    @@media (max-width: 768px) {
        .wa-priority-2 {
            display: none !important;
        }
        
        .wa-responsive-grid {
            font-size: 0.75rem;
        }
        
        .wa-action-button {
            min-width: 36px !important;
            min-height: 36px !important;
            font-size: 0.7rem;
        }
        
        .wa-add-button {
            font-size: 0.8rem;
            padding: 0.75rem 1rem;
        }
    }

    @@media (max-width: 480px) {
        .wa-responsive-grid {
            font-size: 0.7rem;
        }
        
        .wa-responsive-grid .rz-datatable-data th,
        .wa-responsive-grid .rz-datatable-data td {
            padding: 0.25rem !important;
        }
        
        .wa-action-button {
            min-width: 32px !important;
            min-height: 32px !important;
            font-size: 0.6rem;
            padding: 0.25rem !important;
        }
        
        .wa-add-button {
            font-size: 0.75rem;
            padding: 0.5rem 0.75rem;
        }
    }

    /* Landscape mobile adjustments */
    @@media (max-width: 768px) and (orientation: landscape) {
        .wa-priority-2 {
            display: table-cell !important;
        }
    }

    /* Touch-friendly improvements */
    @@media (max-width: 768px) {
        .wa-responsive-grid .rz-datatable-data tr {
            min-height: 44px;
        }
        
        .wa-responsive-grid .rz-datatable-data td {
            vertical-align: middle;
        }
    }
</style>