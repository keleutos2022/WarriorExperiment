@using WarriorExperiment.Persistence.Entities
@using WarriorExperiment.Persistence.Enums
@using WarriorExperiment.Persistence.Validators
@using Blazored.FluentValidation
@inherits WaBaseComponent

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <FluentValidationValidator />
    
    <RadzenStack Gap="1rem">
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H5">Daily Survey</RadzenText>
                
                <!-- Date -->
                <RadzenFormField Text="Date" AllowFloatingLabel="false">
                    <RadzenDatePicker @bind-Value="@Model.Date" ShowTime="false" DateFormat="yyyy-MM-dd" />
                </RadzenFormField>
                
                <!-- Sleep Quality -->
                <RadzenFormField Text="Sleep Quality (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.SleepQuality == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.SleepQuality = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Energy -->
                <RadzenFormField Text="Energy Level (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.Energy == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.Energy = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Mood -->
                <RadzenFormField Text="Mood (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.Mood == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.Mood = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Muscle Soreness -->
                <RadzenFormField Text="Muscle Soreness (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.MuscleSoreness == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.MuscleSoreness = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Stress Level -->
                <RadzenFormField Text="Stress Level (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.StressLevel == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.StressLevel = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Hunger Feeling -->
                <RadzenFormField Text="Hunger Feeling During Undereating Phase (1-10)" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group">
                        @for (int i = 1; i <= 10; i++)
                        {
                            var value = i;
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.HungerFeelingDuringUndereatingPhase == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.HungerFeelingDuringUndereatingPhase = value)" 
                                        class="wa-rating-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Bowel Movement -->
                <RadzenFormField Text="Bowel Movement Time" AllowFloatingLabel="false">
                    <RadzenButtonGroup class="wa-rating-button-group wa-enum-button-group">
                        @foreach (var value in Enum.GetValues<WaBowelMovementTime>())
                        {
                            <RadzenButton Text="@value.ToString()" 
                                        ButtonStyle="@(Model.BowelMovement == value ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.BowelMovement = value)" 
                                        class="wa-enum-button" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Comment -->
                <RadzenFormField Text="Comment (Optional)" AllowFloatingLabel="false">
                    <RadzenTextArea @bind-Value="@Model.Comment" Rows="3" Placeholder="Optional comment..." />
                </RadzenFormField>
                
                <!-- Validation Summary -->
                <ValidationSummary />
                
                <!-- Submit Button -->
                <RadzenButton ButtonType="ButtonType.Submit" Text="Save Survey" ButtonStyle="ButtonStyle.Primary" Icon="save" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</EditForm>

@code {
    [Parameter] public WaDailySurveyEntry Model { get; set; } = new();
    [Parameter] public EventCallback<WaDailySurveyEntry> OnValidSubmit { get; set; }
    
    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Model);
    }
}

<style>
    /* Mobile-friendly button groups */
    .wa-rating-button-group {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        justify-content: flex-start;
    }

    .wa-rating-button {
        min-width: 44px !important;
        min-height: 44px !important;
        flex: 0 0 auto;
        font-size: 0.9rem;
    }

    .wa-enum-button {
        min-width: 44px !important;
        min-height: 44px !important;
        flex: 1 1 auto;
        font-size: 0.8rem;
        padding: 0.5rem !important;
    }

    /* Mobile specific adjustments */
    @@media (max-width: 768px) {
        .wa-rating-button-group {
            gap: 0.5rem;
            justify-content: center;
        }

        .wa-rating-button {
            min-width: 40px !important;
            min-height: 40px !important;
            font-size: 0.8rem;
            padding: 0.5rem !important;
        }

        .wa-enum-button-group {
            flex-direction: column;
        }

        .wa-enum-button {
            width: 100% !important;
            margin-bottom: 0.25rem;
            text-align: center;
        }
    }

    /* Very small screens */
    @@media (max-width: 480px) {
        .wa-rating-button {
            min-width: 36px !important;
            min-height: 36px !important;
            font-size: 0.75rem;
            padding: 0.25rem !important;
        }

        .wa-rating-button-group {
            gap: 0.25rem;
        }

        .wa-enum-button {
            font-size: 0.75rem;
            padding: 0.75rem !important;
        }
    }

    /* Landscape mobile adjustments */
    @@media (max-width: 768px) and (orientation: landscape) {
        .wa-rating-button-group {
            justify-content: flex-start;
        }

        .wa-rating-button {
            min-width: 35px !important;
            min-height: 35px !important;
        }
    }
</style>