@using WarriorExperiment.Persistence.Entities
@using WarriorExperiment.Persistence.Enums
@using WarriorExperiment.Persistence.Validators
@using Blazored.FluentValidation
@inherits WaBaseComponent

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <FluentValidationValidator />
    
    <RadzenStack Gap="1rem">
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H5">Rite of Passage Practice</RadzenText>
                
                <!-- Date -->
                <RadzenFormField Text="Date" AllowFloatingLabel="false">
                    <RadzenDatePicker @bind-Value="@Model.Date" ShowTime="false" DateFormat="yyyy-MM-dd" />
                </RadzenFormField>
                
                <!-- Practice Intensity -->
                <RadzenFormField Text="Practice Intensity" AllowFloatingLabel="false">
                    <RadzenButtonGroup>
                        @foreach (var intensity in Enum.GetValues<WaPracticeIntensity>())
                        {
                            <RadzenButton Text="@intensity.ToString()" 
                                        ButtonStyle="@(Model.PracticeIntensity == intensity ? ButtonStyle.Primary : ButtonStyle.Light)"
                                        Click="@(() => Model.PracticeIntensity = intensity)" />
                        }
                    </RadzenButtonGroup>
                </RadzenFormField>
                
                <!-- Success -->
                <RadzenFormField Text="Success" AllowFloatingLabel="false">
                    <RadzenCheckBox @bind-Value="@Model.Success" Name="success" />
                    <RadzenLabel Text="Practice was successful" Component="success" Style="margin-left: 0.5rem;" />
                </RadzenFormField>
                
                <!-- Dice -->
                <RadzenFormField Text="Dice Roll (2-12 minutes)" AllowFloatingLabel="false">
                    <RadzenNumeric @bind-Value="@Model.Dice" Min="2" Max="12" />
                </RadzenFormField>
                
                <!-- Pull Count -->
                <RadzenFormField Text="Total Pull Count" AllowFloatingLabel="false">
                    <RadzenNumeric @bind-Value="@Model.PullCount" Min="0" />
                </RadzenFormField>
                
                <!-- Ladder Sets -->
                <RadzenText TextStyle="TextStyle.H6">Ladder Sets</RadzenText>
                
                <RadzenRow>
                    <RadzenColumn Size="4">
                        <RadzenFormField Text="Ladder 1 Sets" AllowFloatingLabel="false">
                            <RadzenNumeric @bind-Value="@Model.Ladder1Sets" Min="0" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="4">
                        <RadzenFormField Text="Ladder 2 Sets" AllowFloatingLabel="false">
                            <RadzenNumeric @bind-Value="@Model.Ladder2Sets" Min="0" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="4">
                        <RadzenFormField Text="Ladder 3 Sets" AllowFloatingLabel="false">
                            <RadzenNumeric @bind-Value="@Model.Ladder3Sets" Min="0" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Ladder 4 Sets" AllowFloatingLabel="false">
                            <RadzenNumeric @bind-Value="@Model.Ladder4Sets" Min="0" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Ladder 5 Sets" AllowFloatingLabel="false">
                            <RadzenNumeric @bind-Value="@Model.Ladder5Sets" Min="0" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                
                <!-- Weight -->
                <RadzenFormField Text="Weight Used (kg, Optional)" AllowFloatingLabel="false">
                    <RadzenNumeric @bind-Value="@Model.Weight" Min="0" Max="200" Step="0.5M" />
                </RadzenFormField>
                
                <!-- Calculated Field Display -->
                @if (Model.Dice > 0 && Model.PullCount > 0)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="false">
                        <RadzenText TextStyle="TextStyle.Body1">
                            Pulls per minute: @Model.PullsPerMinute
                        </RadzenText>
                    </RadzenAlert>
                }
                
                <!-- Validation Summary -->
                <ValidationSummary />
                
                <!-- Submit Button -->
                <RadzenButton ButtonType="ButtonType.Submit" Text="Save Practice" ButtonStyle="ButtonStyle.Primary" Icon="save" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</EditForm>

@code {
    [Parameter] public WaRiteOfPassagePracticeEntry Model { get; set; } = new();
    [Parameter] public EventCallback<WaRiteOfPassagePracticeEntry> OnValidSubmit { get; set; }
    
    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Model);
    }
}