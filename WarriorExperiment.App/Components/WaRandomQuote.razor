@using WarriorExperiment.Core.Services
@using WarriorExperiment.Persistence.Entities
@inject WaMotivationQuoteService MotivationQuoteService
@inject WaDefaultDataService DefaultDataService
@inject NotificationService NotificationService
@inherits WaBaseComponent

<RadzenCard class="@GetCardClass()" style="@CardStyle">
    @if (isLoading)
    {
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
            <RadzenText TextStyle="TextStyle.Body2" class="wa-quote-loading">Loading inspiration...</RadzenText>
        </RadzenStack>
    }
    else if (currentQuote != null)
    {
        <RadzenStack Orientation="Orientation.Vertical" Gap="1.5rem">
            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                <RadzenIcon Icon="format_quote" class="wa-quote-icon" />
                <RadzenText class="wa-quote-text">
                    @currentQuote.Quote
                </RadzenText>
                <RadzenText class="wa-quote-author">
                    â€” @currentQuote.Author
                </RadzenText>
            </RadzenStack>
            
            @if (ShowRefreshButton)
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                    <RadzenButton Icon="refresh" 
                                Text="New Quote" 
                                ButtonStyle="ButtonStyle.Light" 
                                Size="ButtonSize.Small"
                                Click="@LoadRandomQuote" 
                                Disabled="@isLoading"
                                class="wa-quote-refresh-btn" />
                </RadzenStack>
            }
        </RadzenStack>
    }
    else
    {
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenIcon Icon="lightbulb_outline" class="wa-quote-empty-icon" />
            <RadzenText TextStyle="TextStyle.Body1" class="wa-quote-empty-text">
                No motivational quotes available yet.
            </RadzenText>
            <RadzenButton Icon="add" 
                        Text="Add Quotes" 
                        ButtonStyle="ButtonStyle.Primary" 
                        Size="ButtonSize.Small"
                        Click="@NavigateToQuotes" />
        </RadzenStack>
    }
</RadzenCard>

@code {
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public string? CardStyle { get; set; }
    [Inject] NavigationManager Navigation { get; set; } = default!;
    
    private WaMotivationQuote? currentQuote;
    private bool isLoading = true;
    private bool hasInitializedDefaults = false;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRandomQuote();
    }
    
    private async Task LoadRandomQuote()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            currentQuote = await MotivationQuoteService.GetRandomQuoteAsync();
            
            // If no quotes exist and we haven't tried to seed defaults yet
            if (currentQuote == null && !hasInitializedDefaults)
            {
                hasInitializedDefaults = true;
                var seededCount = await DefaultDataService.SeedDefaultMotivationQuotesAsync();
                
                if (seededCount > 0)
                {
                    // Try loading a quote again after seeding
                    currentQuote = await MotivationQuoteService.GetRandomQuoteAsync();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = "Failed to load motivational quote",
                Duration = 3000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void NavigateToQuotes()
    {
        Navigation.NavigateTo("/motivation-quotes");
    }
    
    private string GetCardClass()
    {
        return $"wa-random-quote-card {GetCssClass()}";
    }
}

<style>
    .wa-random-quote-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        transition: all 0.3s ease;
    }
    
    .wa-quote-icon {
        font-size: 32px;
        color: rgba(255, 255, 255, 0.3);
        transform: rotate(180deg);
    }
    
    .wa-quote-text {
        font-size: 1.25rem;
        font-style: italic;
        line-height: 1.6;
        color: white;
        margin: 0;
        position: relative;
        padding: 0 1rem;
    }
    
    .wa-quote-text::before {
        content: """;
        position: absolute;
        left: -0.5rem;
        top: -0.5rem;
        font-size: 2rem;
        opacity: 0.5;
    }
    
    .wa-quote-text::after {
        content: """;
        position: absolute;
        right: -0.5rem;
        bottom: -1rem;
        font-size: 2rem;
        opacity: 0.5;
    }
    
    .wa-quote-author {
        font-size: 1rem;
        text-align: right;
        color: rgba(255, 255, 255, 0.9);
        margin: 0.5rem 0 0 0;
        font-weight: 500;
    }
    
    .wa-quote-loading {
        color: rgba(255, 255, 255, 0.8);
        margin: 0;
    }
    
    .wa-quote-refresh-btn {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border-color: rgba(255, 255, 255, 0.3);
    }
    
    .wa-quote-refresh-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.5);
    }
    
    .wa-quote-empty-icon {
        font-size: 48px;
        color: rgba(255, 255, 255, 0.7);
    }
    
    .wa-quote-empty-text {
        color: rgba(255, 255, 255, 0.9);
        margin: 0;
    }
    
    /* Mobile responsive styles */
    @@media (max-width: 768px) {
        .wa-random-quote-card {
            padding: 1.5rem;
        }
        
        .wa-quote-icon {
            font-size: 24px;
        }
        
        .wa-quote-text {
            font-size: 1.1rem;
            line-height: 1.5;
            padding: 0 0.5rem;
        }
        
        .wa-quote-text::before,
        .wa-quote-text::after {
            font-size: 1.5rem;
        }
        
        .wa-quote-author {
            font-size: 0.9rem;
        }
        
        .wa-quote-empty-icon {
            font-size: 36px;
        }
    }
    
    @@media (max-width: 480px) {
        .wa-random-quote-card {
            padding: 1rem;
        }
        
        .wa-quote-icon {
            font-size: 20px;
        }
        
        .wa-quote-text {
            font-size: 1rem;
            line-height: 1.4;
        }
        
        .wa-quote-text::before,
        .wa-quote-text::after {
            font-size: 1.25rem;
        }
        
        .wa-quote-author {
            font-size: 0.85rem;
        }
    }
    
    /* Animation for quote refresh */
    @@keyframes fadeInQuote {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .wa-quote-text,
    .wa-quote-author {
        animation: fadeInQuote 0.5s ease-out;
    }
    
    /* Loading state styling */
    .wa-random-quote-card .rz-progressbar-circular {
        width: 40px !important;
        height: 40px !important;
    }
    
    .wa-random-quote-card .rz-progressbar-circular svg {
        stroke: rgba(255, 255, 255, 0.8);
    }
</style>