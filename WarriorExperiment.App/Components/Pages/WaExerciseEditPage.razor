@page "/exercise/edit"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@page "/exercise/edit/{id:int}"
@using Microsoft.EntityFrameworkCore
@using WarriorExperiment.Persistence.Data
@using WarriorExperiment.Persistence.Entities
@inject WaDbContext Context
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<WaBasePage Title="@pageTitle" SubTitle="@pageSubTitle">
    @if (isLoading)
    {
        <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 400px;">
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        </RadzenStack>
    }
    else if (CurrentUser == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
            Please select a user first
        </RadzenAlert>
    }
    else
    {
        <RadzenCard Style="max-width: 600px;">
            <RadzenTemplateForm TItem="WaExercise" Data="@model" Submit="@HandleSubmit">
                <RadzenStack Gap="1rem">
                    <RadzenFormField Text="Exercise Name" Variant="Variant.Outlined">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@model.Name" Name="Name" Style="width: 100%;" 
                                         Placeholder="e.g., Push-ups, Pull-ups, Squats..." />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Name" Text="Exercise name is required" />
                        </Helper>
                    </RadzenFormField>
                    
                    <RadzenFormField Text="Variety Practice" Variant="Variant.Outlined">
                        <ChildContent>
                            <RadzenDropDown @bind-Value="@model.VarietyPracticeId" 
                                          Data="@varietyPractices" 
                                          TextProperty="DisplayText" ValueProperty="Id"
                                          Name="VarietyPractice" Style="width: 100%;"
                                          Placeholder="Select practice session..." />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="VarietyPractice" Text="Practice session is required" />
                        </Helper>
                    </RadzenFormField>
                    
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="Sets" Variant="Variant.Outlined">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="@model.Sets" ShowUpDown="false" 
                                                 Min="0" Name="Sets" Style="width: 100%;" />
                                </ChildContent>
                                <Helper>
                                    <RadzenRequiredValidator Component="Sets" Text="Sets is required" />
                                </Helper>
                            </RadzenFormField>
                        </RadzenColumn>
                        
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="Reps" Variant="Variant.Outlined">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="@model.Reps" ShowUpDown="false" 
                                                 Min="0" Name="Reps" Style="width: 100%;" />
                                </ChildContent>
                                <Helper>
                                    <RadzenRequiredValidator Component="Reps" Text="Reps is required" />
                                </Helper>
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <RadzenFormField Text="Weight (kg)" Variant="Variant.Outlined">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="@model.Weight" ShowUpDown="false" 
                                         Format="0.0" Step="0.5" Style="width: 100%;" 
                                         Placeholder="Leave empty for bodyweight exercises" />
                        </ChildContent>
                    </RadzenFormField>
                    
                    @if (model.Sets > 0 && model.Reps > 0)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
                            <strong>Total Volume:</strong> 
                            @if (model.Weight.HasValue)
                            {
                                <span>@((model.Sets * model.Reps * model.Weight.Value).ToString("F0")) kg</span>
                            }
                            else
                            {
                                <span>@(model.Sets * model.Reps) reps (bodyweight)</span>
                            }
                        </RadzenAlert>
                    }
                    
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.End" 
                               AlignItems="AlignItems.Center" Style="margin-top: 2rem;">
                        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" 
                                    Click="@(() => Navigation.NavigateTo("/exercises"))" />
                        <RadzenButton Text="@submitButtonText" ButtonType="ButtonType.Submit" 
                                    ButtonStyle="ButtonStyle.Primary" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenCard>
    }
</WaBasePage>

@code {
    [Parameter] public int? Id { get; set; }
    [CascadingParameter] public WaUser? CurrentUser { get; set; }
    
    private WaExercise model = new();
    private List<VarietyPracticeDisplay> varietyPractices = new();
    private bool isLoading = true;
    private string pageTitle = "New Exercise";
    private string pageSubTitle = "Add a new exercise entry";
    private string submitButtonText = "Save";
    
    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            isLoading = false;
            return;
        }
        
        // Load variety practices for this user
        var practices = await Context.VarietyPractices
            .Where(vp => vp.UserId == CurrentUser.Id)
            .OrderByDescending(vp => vp.Date)
            .ToListAsync();
            
        varietyPractices = practices.Select(vp => new VarietyPracticeDisplay
        {
            Id = vp.Id,
            DisplayText = $"{vp.Date:yyyy-MM-dd} - {(string.IsNullOrWhiteSpace(vp.Notes) ? "Variety Practice" : vp.Notes.Substring(0, Math.Min(vp.Notes.Length, 30)))}"
        }).ToList();
        
        if (Id.HasValue)
        {
            var exercise = await Context.Exercises
                .Include(e => e.VarietyPractice)
                .FirstOrDefaultAsync(e => e.Id == Id.Value && e.VarietyPractice.UserId == CurrentUser.Id);
                
            if (exercise != null)
            {
                model = exercise;
                pageTitle = "Edit Exercise";
                pageSubTitle = $"Update {exercise.Name}";
                submitButtonText = "Update";
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Exercise not found");
                Navigation.NavigateTo("/exercises");
                return;
            }
        }
        else
        {
            model.Sets = 1;
            model.Reps = 1;
            
            // Set default variety practice if only one exists
            if (varietyPractices.Count == 1)
            {
                model.VarietyPracticeId = varietyPractices[0].Id;
            }
        }
        
        isLoading = false;
    }
    
    private async Task HandleSubmit()
    {
        try
        {
            if (Id.HasValue)
            {
                model.UpdatedAt = DateTime.UtcNow;
                Context.Exercises.Update(model);
            }
            else
            {
                model.CreatedAt = DateTime.UtcNow;
                model.UpdatedAt = DateTime.UtcNow;
                Context.Exercises.Add(model);
            }
            
            await Context.SaveChangesAsync();
            
            NotificationService.Notify(NotificationSeverity.Success, 
                Id.HasValue ? "Exercise updated successfully" : "Exercise saved successfully");
                
            Navigation.NavigateTo("/exercises");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error saving exercise: {ex.Message}");
        }
    }
    
    private class VarietyPracticeDisplay
    {
        public int Id { get; set; }
        public string DisplayText { get; set; } = string.Empty;
    }
}