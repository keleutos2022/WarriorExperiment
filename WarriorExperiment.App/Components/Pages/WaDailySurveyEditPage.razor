@page "/daily-survey/edit"
@page "/daily-survey/edit/{id:int}"
@using WarriorExperiment.Core.Services
@using WarriorExperiment.Persistence.Models
@inject WaDailySurveyEntryService DailySurveyService
@inject NavigationManager Navigation

<WaBasePage Title="@pageTitle" SubTitle="@pageSubTitle">
    @if (isLoading)
    {
        <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 400px;">
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        </RadzenStack>
    }
    else if (CurrentUser == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
            Please select a user first
        </RadzenAlert>
    }
    else
    {
        <RadzenStack Gap="1rem">
            <RadzenButton Text="← Back to List" Icon="arrow_back" ButtonStyle="ButtonStyle.Light" 
                        Click="@(() => Navigation.NavigateTo("/daily-survey"))" />
            
            <WaDailySurveyForm Model="@currentEntry" OnValidSubmit="@HandleFormSubmit" />
        </RadzenStack>
    }
</WaBasePage>

@code {
    [Parameter] public int? Id { get; set; }
    [CascadingParameter] public WaUser? CurrentUser { get; set; }
    [Inject] NotificationService NotificationService { get; set; } = default!;
    
    private WaDailySurveyEntry currentEntry = new();
    private bool isLoading = true;
    private string pageTitle => Id.HasValue ? "Edit Daily Survey" : "New Daily Survey";
    private string pageSubTitle => Id.HasValue ? "Update your wellness entry" : "Record your daily wellness metrics";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        if (CurrentUser == null)
        {
            isLoading = false;
            return;
        }
        
        isLoading = true;
        
        try
        {
            if (Id.HasValue)
            {
                // Load existing entry for editing
                var entry = await DailySurveyService.GetByIdAsync(Id.Value);
                if (entry != null)
                {
                    currentEntry = entry;
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Entry not found");
                    Navigation.NavigateTo("/daily-survey");
                    return;
                }
            }
            else
            {
                // New entry
                currentEntry = new WaDailySurveyEntry
                {
                    UserId = CurrentUser.Id,
                    Date = DateTime.SpecifyKind(DateTime.UtcNow.Date, DateTimeKind.Utc),
                    SleepQuality = 5,
                    Energy = 5,
                    Mood = 5,
                    MuscleSoreness = 5,
                    StressLevel = 5,
                    HungerFeelingDuringUndereatingPhase = 5
                };
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task HandleFormSubmit(WaDailySurveyEntry entry)
    {
        try
        {
            if (Id.HasValue)
            {
                await DailySurveyService.UpdateAsync(entry);
                NotificationService.Notify(NotificationSeverity.Success, "Daily survey updated successfully");
            }
            else
            {
                await DailySurveyService.CreateAsync(entry);
                NotificationService.Notify(NotificationSeverity.Success, "Daily survey created successfully");
            }
            
            Navigation.NavigateTo("/daily-survey");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error saving survey: {ex.Message}");
        }
    }
    
}